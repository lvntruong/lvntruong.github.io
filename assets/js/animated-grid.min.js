const Dot=class Dot{constructor(x,y,r=0){this.x=x,this.y=y,this.r=r,this.animationCount=0}static midPoint(a,b){const mx=a.x+.5*(b.x-a.x),my=a.y+.5*(b.y-a.y);return new Dot(mx,my)}static distance(a,b){const dx=a.x-b.x,dy=a.y-b.y;return Math.sqrt(dx*dx+dy*dy)}},AnimatedGrid=class AnimatedGrid{constructor(canvasElement){const that=this;this.dotsStep=10,this.dotsDefaultRadius=.5,this.dotsMaxRadius=40,this.trailWidth=100,this.maxAnimationCount=40,this.patternVerticalOffset=1,this.patternHorizontalOffset=0,this.dots=[],this.lastPoint=null,this.canvas=canvasElement,this.setupScene(),this.draw(),this.canvas.addEventListener("mousemove",function(e){that.registerPoint(e.pageX-this.offsetLeft,e.pageY-this.offsetTop)}),this.canvas.addEventListener("touchmove",function(e){that.registerPoint(e.changedTouches[0].pageX-this.offsetLeft,e.changedTouches[0].pageY-this.offsetTop)}),window.addEventListener("resize",function(){that.setupScene()})}setupScene(){this.dots=[],this.lastPoint=null;const hero=document.getElementById("home");this.canvas.width=hero.offsetWidth,this.canvas.height=hero.offsetHeight,this.prerenderedGrid=this.renderGrid(),this.ctx=this.canvas.getContext("2d")}renderGrid(){let canvas=document.createElement("canvas");canvas.width=this.canvas.width,canvas.height=this.canvas.height;let context=canvas.getContext("2d");context.clearRect(0,0,canvas.width,canvas.height);for(let i=0;i<Math.round(canvas.width/this.dotsStep*1.1);i++)for(let j=0;j<Math.round(canvas.height/this.dotsStep*1.1);j++){let x=this.dotsStep*i+this.patternHorizontalOffset,y=this.dotsStep*j+this.patternVerticalOffset,r=this.dotsDefaultRadius;context.beginPath(),context.fillStyle="#238c8c",context.arc(x,y,r,0,2*Math.PI,!0),context.fill()}return canvas}findNearestGridDots(x,y,dist){let givenDot=new Dot(x,y),i_min=Math.floor(x/this.dotsStep),j_min=Math.floor(y/this.dotsStep),surroundingSquare=[{i:i_min,j:j_min},{i:i_min,j:j_min+1},{i:i_min+1,j:j_min},{i:i_min+1,j:j_min+1}],nearestDots=[];for(let n in surroundingSquare){let dotX=this.dotsStep*surroundingSquare[n].i+this.patternHorizontalOffset,dotY=this.dotsStep*surroundingSquare[n].j+this.patternVerticalOffset,currentDot=new Dot(dotX,dotY,this.dotsDefaultRadius);Dot.distance(givenDot,currentDot)<dist&&nearestDots.push(currentDot)}return nearestDots}draw(){const that=this;requestAnimationFrame(function(){that.draw()}),this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.drawImage(this.prerenderedGrid,0,0),this.drawAnimatedDots()}drawAnimatedDots(){let b,k;for(let i in this.dots){let dot=this.dots[i];dot.animationCount<this.maxAnimationCount?(dot.animationCount<this.maxAnimationCount/2?(b=this.dotsDefaultRadius,k=2*(this.dotsMaxRadius-this.dotsDefaultRadius)/this.maxAnimationCount):(b=2*this.dotsMaxRadius-this.dotsDefaultRadius,k=-2*(this.dotsMaxRadius-this.dotsDefaultRadius)/this.maxAnimationCount),dot.r=k*dot.animationCount+b,dot.animationCount++,this.ctx.beginPath(),this.ctx.fillStyle="#c2dede",this.ctx.arc(dot.x,dot.y,dot.r,0,2*Math.PI,!0),this.ctx.fill()):this.dots.splice(i,1)}}registerPoint(x,y){const point=new Dot(x,y);if(this.lastPoint){let that=this,midpoint=Dot.midPoint(this.lastPoint,point),midpoint1=Dot.midPoint(point,midpoint),midpoint2=Dot.midPoint(this.lastPoint,midpoint),midpoint3=Dot.midPoint(point,midpoint1),midpoint4=Dot.midPoint(midpoint1,midpoint),midpoint5=Dot.midPoint(midpoint,midpoint2),midpoint6=Dot.midPoint(midpoint2,this.lastPoint),dotsToDraw=this.findNearestGridDots(point.x,point.y,this.trailWidth);dotsToDraw=(dotsToDraw=(dotsToDraw=(dotsToDraw=(dotsToDraw=(dotsToDraw=(dotsToDraw=dotsToDraw.concat(this.findNearestGridDots(midpoint.x,midpoint.y,this.trailWidth))).concat(this.findNearestGridDots(midpoint1.x,midpoint1.y,this.trailWidth))).concat(this.findNearestGridDots(midpoint2.x,midpoint2.y,this.trailWidth))).concat(this.findNearestGridDots(midpoint3.x,midpoint3.y,this.trailWidth))).concat(this.findNearestGridDots(midpoint4.x,midpoint4.y,this.trailWidth))).concat(this.findNearestGridDots(midpoint5.x,midpoint5.y,this.trailWidth))).concat(this.findNearestGridDots(midpoint6.x,midpoint6.y,this.trailWidth));for(let i in dotsToDraw){let found=!1;for(let j in that.dots)if(that.dots[j].x===dotsToDraw[i].x&&that.dots[j].y===dotsToDraw[i].y){found=!0;break}found||that.dots.push(dotsToDraw[i])}}this.lastPoint=point}};window.onload=function(){new AnimatedGrid(document.querySelector("#animated-grid"))};